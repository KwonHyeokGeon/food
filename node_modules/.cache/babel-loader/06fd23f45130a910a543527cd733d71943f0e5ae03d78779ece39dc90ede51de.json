{"ast":null,"code":"import { db } from '../../firebase';\nexport default {\n  name: \"NoticeDetail\",\n  data() {\n    return {\n      BoardContent: [],\n      dateTime: \"\"\n    };\n  },\n  mounted() {\n    if (this.$route.query.docId === null) {\n      this.$router.replace(\"/cs/notice\");\n    }\n    db.collection(\"notice\").doc(this.$route.query.docId).get().then(data => {\n      this.BoardContent = data.data();\n    }).then(() => {\n      db.collection(\"notice\").doc(this.$route.query.docId).get().then(update => {\n        this.BoardContent = update.data();\n        const date = this.BoardContent.date.seconds * 1000 + this.BoardContent.date.nanoseconds / 1000000;\n        const new_date = new Date(date);\n        //밀리세컨드초를 date객체로 변환한다\n        const formattedDate = ('' + new_date.getFullYear()).slice(-2) + '-' + ('0' + (new_date.getMonth() + 1)).slice(-2) + '-' + ('0' + new_date.getDate()).slice(-2) + ' ' + ('0' + new_date.getHours()).slice(-2) + ':' + ('0' + new_date.getMinutes()).slice(-2) + ':' + ('0' + new_date.getSeconds()).slice(-2) + '';\n        return this.dateTime = formattedDate;\n      });\n    });\n  },\n  methods: {\n    Delete() {\n      let msg = confirm(\"삭제된 데이터는 복구할 수 없습니다 \\r\\r 삭제하시겠습니까?\");\n      if (msg) {\n        db.collection(\"notice\").doc(this.$route.query.docId).delete().then(() => {\n          alert(\"게시물이 삭제되었습니다.\");\n          this.$router.replace(\"/cs/notice\");\n        }).catch(error => {\n          console.error(\"Error removing document: \", error);\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","name","data","BoardContent","dateTime","mounted","$route","query","docId","$router","replace","collection","doc","get","then","update","date","seconds","nanoseconds","new_date","Date","formattedDate","getFullYear","slice","getMonth","getDate","getHours","getMinutes","getSeconds","methods","Delete","msg","confirm","delete","alert","catch","error","console"],"sources":["D:\\Students\\조영민\\vue\\food\\food\\src\\views\\Cs\\NoticeDetail.vue"],"sourcesContent":["<template>\r\n    <div class=\"basis-full\">\r\n        <div>\r\n            <div>\r\n                {{BoardContent.title}}\r\n            </div>\r\n            <div class=\"basis-full flex text-center\">\r\n                <p><span>작성자</span>{{BoardContent.author}}</p>\r\n                <p><span>작성일시</span>{{dateTime}}</p>\r\n\r\n            </div>\r\n        </div>\r\n        <div >\r\n            {{ BoardContent.content }}\r\n            <img v-if=\"BoardContent.file\" :src=\"BoardContent.file\" alt=\"첨부파일\">\r\n        </div>\r\n        <div class=\"flex justify-between\">\r\n            <div>\r\n                <router-link to=\"/cs/notice/list\" class=\"bg-indigo-400 hover:bg-indigo-600\">목록으로</router-link>\r\n            </div>\r\n            <div class=\"flex gap-x-5\">\r\n                <router-link to=\"/cs/notice/modify\" class=\"bg-indigo-400 hover:bg-indigo-600\">수정</router-link>\r\n                <button @click=\"Delete()\" class=\"bg-red-400 hover:bg-red-600\">삭제</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport {db} from '../../firebase';\r\nexport default {\r\n    name:\"NoticeDetail\",\r\n    data() {\r\n        return {\r\n            BoardContent : [],\r\n            dateTime: \"\"\r\n        }\r\n    },\r\n    mounted() {\r\n        if ( this.$route.query.docId === null){\r\n            this.$router.replace(\"/cs/notice\")\r\n        }\r\n        db.collection(\"notice\").doc(this.$route.query.docId).get().then((data)=>{\r\n            this.BoardContent = data.data()\r\n        }).then(()=>{\r\n            db.collection(\"notice\").doc(this.$route.query.docId).get().then((update)=>{\r\n                this.BoardContent = update.data();\r\n                const date = this.BoardContent.date.seconds*1000 + this.BoardContent.date.nanoseconds/1000000;\r\n                const new_date = new Date(date);\r\n                //밀리세컨드초를 date객체로 변환한다\r\n                const formattedDate = (''+new_date.getFullYear()).slice(-2)+'-'+ ('0'+( new_date.getMonth()+1)).slice(-2)+'-'+('0'+ new_date.getDate()).slice(-2)+' '+('0'+ new_date.getHours()).slice(-2)+':'+('0'+ new_date.getMinutes()).slice(-2)+':'+('0'+ new_date.getSeconds()).slice(-2)+'';\r\n                return this.dateTime = formattedDate;\r\n            })\r\n        })\r\n    },\r\n    methods: {\r\n        Delete(){\r\n            let msg = confirm(\"삭제된 데이터는 복구할 수 없습니다 \\r\\r 삭제하시겠습니까?\")\r\n            if (msg){\r\n                db.collection(\"notice\").doc(this.$route.query.docId).delete().then(() => {\r\n                    alert(\"게시물이 삭제되었습니다.\");\r\n                    this.$router.replace(\"/cs/notice\")\r\n                }).catch((error) => {\r\n                    console.error(\"Error removing document: \", error);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n    \r\n</style>"],"mappings":"AA4BA,SAAQA,EAAE,QAAO,gBAAgB;AACjC,eAAe;EACXC,IAAI,EAAC,cAAc;EACnBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,YAAW,EAAI,EAAE;MACjBC,QAAQ,EAAE;IACd;EACJ,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAK,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAI,KAAM,IAAI,EAAC;MAClC,IAAI,CAACC,OAAO,CAACC,OAAO,CAAC,YAAY;IACrC;IACAV,EAAE,CAACW,UAAU,CAAC,QAAQ,CAAC,CAACC,GAAG,CAAC,IAAI,CAACN,MAAM,CAACC,KAAK,CAACC,KAAK,CAAC,CAACK,GAAG,CAAC,CAAC,CAACC,IAAI,CAAEZ,IAAI,IAAG;MACpE,IAAI,CAACC,YAAW,GAAID,IAAI,CAACA,IAAI,CAAC;IAClC,CAAC,CAAC,CAACY,IAAI,CAAC,MAAI;MACRd,EAAE,CAACW,UAAU,CAAC,QAAQ,CAAC,CAACC,GAAG,CAAC,IAAI,CAACN,MAAM,CAACC,KAAK,CAACC,KAAK,CAAC,CAACK,GAAG,CAAC,CAAC,CAACC,IAAI,CAAEC,MAAM,IAAG;QACtE,IAAI,CAACZ,YAAW,GAAIY,MAAM,CAACb,IAAI,CAAC,CAAC;QACjC,MAAMc,IAAG,GAAI,IAAI,CAACb,YAAY,CAACa,IAAI,CAACC,OAAO,GAAC,IAAG,GAAI,IAAI,CAACd,YAAY,CAACa,IAAI,CAACE,WAAW,GAAC,OAAO;QAC7F,MAAMC,QAAO,GAAI,IAAIC,IAAI,CAACJ,IAAI,CAAC;QAC/B;QACA,MAAMK,aAAY,GAAI,CAAC,EAAE,GAACF,QAAQ,CAACG,WAAW,CAAC,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAC,GAAG,GAAE,CAAC,GAAG,IAAGJ,QAAQ,CAACK,QAAQ,CAAC,CAAC,GAAC,CAAC,CAAC,EAAED,KAAK,CAAC,CAAC,CAAC,CAAC,GAAC,GAAG,GAAC,CAAC,GAAG,GAAEJ,QAAQ,CAACM,OAAO,CAAC,CAAC,EAAEF,KAAK,CAAC,CAAC,CAAC,CAAC,GAAC,GAAG,GAAC,CAAC,GAAG,GAAEJ,QAAQ,CAACO,QAAQ,CAAC,CAAC,EAAEH,KAAK,CAAC,CAAC,CAAC,CAAC,GAAC,GAAG,GAAC,CAAC,GAAG,GAAEJ,QAAQ,CAACQ,UAAU,CAAC,CAAC,EAAEJ,KAAK,CAAC,CAAC,CAAC,CAAC,GAAC,GAAG,GAAC,CAAC,GAAG,GAAEJ,QAAQ,CAACS,UAAU,CAAC,CAAC,EAAEL,KAAK,CAAC,CAAC,CAAC,CAAC,GAAC,EAAE;QACnR,OAAO,IAAI,CAACnB,QAAO,GAAIiB,aAAa;MACxC,CAAC;IACL,CAAC;EACL,CAAC;EACDQ,OAAO,EAAE;IACLC,MAAMA,CAAA,EAAE;MACJ,IAAIC,GAAE,GAAIC,OAAO,CAAC,oCAAoC;MACtD,IAAID,GAAG,EAAC;QACJ/B,EAAE,CAACW,UAAU,CAAC,QAAQ,CAAC,CAACC,GAAG,CAAC,IAAI,CAACN,MAAM,CAACC,KAAK,CAACC,KAAK,CAAC,CAACyB,MAAM,CAAC,CAAC,CAACnB,IAAI,CAAC,MAAM;UACrEoB,KAAK,CAAC,eAAe,CAAC;UACtB,IAAI,CAACzB,OAAO,CAACC,OAAO,CAAC,YAAY;QACrC,CAAC,CAAC,CAACyB,KAAK,CAAEC,KAAK,IAAK;UAChBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACrD,CAAC,CAAC;MACN;IACJ;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}