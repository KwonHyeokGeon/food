{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, withDirectives as _withDirectives, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"basis-full\"\n};\nconst _hoisted_2 = {\n  class: \"basis-full flex text-center\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"span\", null, \"작성자\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"span\", null, \"작성일시\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"flex j\"\n};\nconst _hoisted_6 = {\n  class: \"flex justify-between\"\n};\nconst _hoisted_7 = {\n  class: \"flex gap-x-5\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", null, _toDisplayString($data.BoardContent.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, [_hoisted_3, _createTextVNode(_toDisplayString($data.BoardContent.author), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_hoisted_4, _createTextVNode(_toDisplayString($data.dateTime), 1 /* TEXT */)])])]), _createElementVNode(\"div\", null, _toDisplayString($data.BoardContent.content), 1 /* TEXT */), _createElementVNode(\"div\", null, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.BoardContent.reply, e => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: e\n    }, [_createElementVNode(\"p\", null, _toDisplayString(e.content), 1 /* TEXT */), _createTextVNode(), _createElementVNode(\"span\", null, _toDisplayString(e.author), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_5, [_createTextVNode(\" 댓글내용\"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.reply.content = $event),\n    class: \"border\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.reply.content]]), _createTextVNode(\" 작성자\"), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.reply.author = $event),\n    class: \"border\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.reply.author]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.Comment()),\n    class: \"bg-indigo-400 hover:bg-indigo-600\"\n  }, \"등록하기\")]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", null, [_createVNode(_component_router_link, {\n    to: \"/cs/qna/list\",\n    class: \"bg-indigo-400 hover:bg-indigo-600\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"목록으로\")]),\n    _: 1 /* STABLE */\n  })]), _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_router_link, {\n    to: \"/cs/qna/modify\",\n    class: \"bg-indigo-400 hover:bg-indigo-600\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"수정\")]),\n    _: 1 /* STABLE */\n  }), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => $options.Delete()),\n    class: \"bg-red-400 hover:bg-red-600\"\n  }, \"삭제\")])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_toDisplayString","$data","BoardContent","title","_hoisted_2","_hoisted_3","author","_hoisted_4","dateTime","content","_Fragment","_renderList","reply","e","key","_hoisted_5","type","$event","onClick","_cache","$options","Comment","_hoisted_6","_createVNode","_component_router_link","to","_hoisted_7","Delete"],"sources":["D:\\Students\\조영민\\vue\\food\\food\\src\\views\\Cs\\QnaDetail.vue"],"sourcesContent":["<template>\r\n    <div class=\"basis-full\">\r\n        <div>\r\n            <div>\r\n                {{BoardContent.title}}\r\n            </div>\r\n            <div class=\"basis-full flex text-center\">\r\n                <p><span>작성자</span>{{BoardContent.author}}</p>\r\n                <p><span>작성일시</span>{{dateTime}}</p>\r\n\r\n            </div>\r\n        </div>\r\n        <div>\r\n            {{ BoardContent.content }}\r\n        </div>\r\n        <div>\r\n            <ul>\r\n                <li v-for=\"e in BoardContent.reply\" :key=\"e\"><p>{{ e.content }}</p> <span>{{e.author}}</span></li>\r\n            </ul>\r\n        </div>\r\n        <div class=\"flex j\">\r\n            댓글내용<input type=\"text\" v-model=\"reply.content\" class=\"border\">\r\n            작성자<textarea v-model=\"reply.author\" class=\"border\"></textarea>\r\n            <button @click=\"Comment()\" class=\"bg-indigo-400 hover:bg-indigo-600\">등록하기</button>\r\n        </div>\r\n        <div class=\"flex justify-between\">\r\n            <div>\r\n                <router-link to=\"/cs/qna/list\" class=\"bg-indigo-400 hover:bg-indigo-600\">목록으로</router-link>\r\n            </div>\r\n            <div class=\"flex gap-x-5\">\r\n                <router-link to=\"/cs/qna/modify\" class=\"bg-indigo-400 hover:bg-indigo-600\">수정</router-link>\r\n                <button @click=\"Delete()\" class=\"bg-red-400 hover:bg-red-600\">삭제</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport {db} from '../../firebase';\r\nexport default {\r\n    name:\"qnaDetail\",\r\n    data() {\r\n        return {\r\n            BoardContent : [],\r\n            dateTime: \"\",\r\n            reply:{\r\n                content:\"\",\r\n                author:this.$store.displayName\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        if ( this.$route.query.docId === null){\r\n            this.$router.replace(\"/cs/qna\")\r\n        }\r\n        db.collection(\"qna\").doc(this.$route.query.docId).get().then((data)=>{\r\n            this.BoardContent = data.data()\r\n        }).then(()=>{\r\n            db.collection(\"qna\").doc(this.$route.query.docId).get().then((update)=>{\r\n                this.BoardContent = update.data();\r\n                const date = this.BoardContent.date.seconds*1000 + this.BoardContent.date.nanoseconds/1000000;\r\n                const new_date = new Date(date);\r\n                //밀리세컨드초를 date객체로 변환한다\r\n                const formattedDate = (''+new_date.getFullYear()).slice(-2)+'-'+ ('0'+( new_date.getMonth()+1)).slice(-2)+'-'+('0'+ new_date.getDate()).slice(-2)+' '+('0'+ new_date.getHours()).slice(-2)+':'+('0'+ new_date.getMinutes()).slice(-2)+':'+('0'+ new_date.getSeconds()).slice(-2)+'';\r\n                return this.dateTime = formattedDate;\r\n            })\r\n        })\r\n    },\r\n    methods: {\r\n        Delete(){\r\n            let msg = confirm(\"삭제된 데이터는 복구할 수 없습니다 \\r\\r 삭제하시겠습니까?\")\r\n            if (msg){\r\n                db.collection(\"qna\").doc(this.$route.query.docId).delete().then(() => {\r\n                    alert(\"게시물이 삭제되었습니다.\");\r\n                    this.$router.replace(\"/cs/qna\")\r\n                }).catch((error) => {\r\n                    console.error(\"Error removing document: \", error);\r\n                });\r\n            }\r\n        },\r\n        Comment(){\r\n            this.BoardContent.reply.push(this.reply);\r\n            db.collection(\"qna\").doc(this.$store.state.qnaId).update({\"reply\":this.BoardContent.reply}).then(()=>{\r\n                alert(\"댓글이 등록되었습니다.\");\r\n                db.collection(\"qna\").doc(this.$route.query.docId).get().then((data)=>{\r\n                    this.BoardContent = data.data()\r\n                })\r\n            })\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n    \r\n</style>"],"mappings":";;EACSA,KAAK,EAAC;AAAY;;EAKVA,KAAK,EAAC;AAA6B;gCACjCC,mBAAA,CAAgB,cAAV,KAAG;gCACTA,mBAAA,CAAiB,cAAX,MAAI;;EAYhBD,KAAK,EAAC;AAAQ;;EAKdA,KAAK,EAAC;AAAsB;;EAIxBA,KAAK,EAAC;AAAc;;;uBA5BjCE,mBAAA,CAiCM,OAjCNC,UAiCM,GAhCFF,mBAAA,CASM,cARFA,mBAAA,CAEM,aAAAG,gBAAA,CADAC,KAAA,CAAAC,YAAY,CAACC,KAAK,kBAExBN,mBAAA,CAIM,OAJNO,UAIM,GAHFP,mBAAA,CAA8C,YAA3CQ,UAAgB,E,kCAAEJ,KAAA,CAAAC,YAAY,CAACI,MAAM,iB,GACxCT,mBAAA,CAAoC,YAAjCU,UAAiB,E,kCAAEN,KAAA,CAAAO,QAAQ,iB,OAItCX,mBAAA,CAEM,aAAAG,gBAAA,CADCC,KAAA,CAAAC,YAAY,CAACO,OAAO,kBAE3BZ,mBAAA,CAIM,cAHFA,mBAAA,CAEK,c,kBADDC,mBAAA,CAAkGY,SAAA,QAAAC,WAAA,CAAlFV,KAAA,CAAAC,YAAY,CAACU,KAAK,EAAvBC,CAAC;yBAAZf,mBAAA,CAAkG;MAA7DgB,GAAG,EAAED;IAAC,IAAEhB,mBAAA,CAAsB,WAAAG,gBAAA,CAAhBa,CAAC,CAACJ,OAAO,kB,oBAAQZ,mBAAA,CAAyB,cAAAG,gBAAA,CAAjBa,CAAC,CAACP,MAAM,iB;sCAG5FT,mBAAA,CAIM,OAJNkB,UAIM,G,iBAJc,OACZ,G,gBAAAlB,mBAAA,CAA0D;IAAnDmB,IAAI,EAAC,MAAM;+DAAUf,KAAA,CAAAW,KAAK,CAACH,OAAO,GAAAQ,MAAA;IAAErB,KAAK,EAAC;iDAArBK,KAAA,CAAAW,KAAK,CAACH,OAAO,E,oBAAiB,MAC3D,G,gBAAAZ,mBAAA,CAA2D;+DAAxCI,KAAA,CAAAW,KAAK,CAACN,MAAM,GAAAW,MAAA;IAAErB,KAAK,EAAC;iDAApBK,KAAA,CAAAW,KAAK,CAACN,MAAM,E,GAClCT,mBAAA,CAAkF;IAAzEqB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAF,MAAA,IAAEG,QAAA,CAAAC,OAAO;IAAIzB,KAAK,EAAC;KAAoC,MAAI,E,GAE7EC,mBAAA,CAQM,OARNyB,UAQM,GAPFzB,mBAAA,CAEM,cADF0B,YAAA,CAA2FC,sBAAA;IAA9EC,EAAE,EAAC,cAAc;IAAC7B,KAAK,EAAC;;sBAAoC,MAAI,C,iBAAJ,MAAI,E;;QAEjFC,mBAAA,CAGM,OAHN6B,UAGM,GAFFH,YAAA,CAA2FC,sBAAA;IAA9EC,EAAE,EAAC,gBAAgB;IAAC7B,KAAK,EAAC;;sBAAoC,MAAE,C,iBAAF,IAAE,E;;MAC7EC,mBAAA,CAAyE;IAAhEqB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAF,MAAA,IAAEG,QAAA,CAAAO,MAAM;IAAI/B,KAAK,EAAC;KAA8B,IAAE,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}