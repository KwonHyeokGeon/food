{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"basis-full\"\n};\nconst _hoisted_2 = {\n  class: \"max-w-7xl mx-auto\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createStaticVNode(\"<ul class=\\\"flex justify-between\\\"><li class=\\\"basis-10\\\">번호</li><li class=\\\"basis-7/12\\\">제목</li><li class=\\\"basis-16\\\">작성자</li><li class=\\\"basis-24\\\">날짜</li></ul>\", 1);\nconst _hoisted_4 = {\n  key: 0,\n  class: \"flex justify-between\"\n};\nconst _hoisted_5 = {\n  class: \"basis-10 text-center\"\n};\nconst _hoisted_6 = {\n  class: \"basis-7/12\"\n};\nconst _hoisted_7 = {\n  class: \"basis-16 text-center\"\n};\nconst _hoisted_8 = {\n  class: \"basis-24 text-center\"\n};\nconst _hoisted_9 = {\n  class: \"flex justify-end\"\n};\nconst _hoisted_10 = {\n  class: \"flex justify-center basis-full gap-x-2 items-center\"\n};\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = [\"onClick\"];\nconst _hoisted_13 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.dataList, (e, index) => {\n    return _openBlock(), _createElementBlock(_Fragment, {\n      key: index\n    }, [$options.calculateNumber($data.totalLength, $data.perPage, $data.page, index) > 0 ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_4, [_createElementVNode(\"li\", _hoisted_5, _toDisplayString($options.calculateNumber($data.totalLength, $data.perPage, $data.page, index)), 1 /* TEXT */), _createElementVNode(\"li\", _hoisted_6, [_createVNode(_component_router_link, {\n      to: {\n        name: 'noticeDetail',\n        query: {\n          docId: $data.dataId[index]\n        }\n      },\n      onClick: $event => _ctx.$store.commit('NoticeDetail', $data.dataId[index])\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(e.title), 1 /* TEXT */)]),\n\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\", \"onClick\"])]), _createElementVNode(\"li\", _hoisted_7, _toDisplayString(e.author), 1 /* TEXT */), _createElementVNode(\"li\", _hoisted_8, _toDisplayString($options.BoardDate(index)), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_9, [_createVNode(_component_router_link, {\n    to: \"/cs/notice/write\",\n    class: \"bg-indigo-400 hover:bg-indigo-600\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"글쓰기\")]),\n    _: 1 /* STABLE */\n  })]), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.prevPage && $options.prevPage(...args)),\n    disabled: $data.currentPage <= 1,\n    class: \"font-bold\"\n  }, \"이전\", 8 /* PROPS */, _hoisted_11), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.pageCount.pagenation, e => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: e,\n      onClick: $event => $options.goToPage(e),\n      class: _normalizeClass(e === $data.page ? 'font-bold text-indigo-600' : 'text-slate-600')\n    }, _toDisplayString(e), 11 /* TEXT, CLASS, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.nextPage && $options.nextPage(...args)),\n    disabled: $data.currentPage >= $options.pageCount.totalPage / $data.block,\n    class: \"font-bold\"\n  }, \"다음\", 8 /* PROPS */, _hoisted_13)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","$data","dataList","e","index","$options","calculateNumber","totalLength","perPage","page","_hoisted_4","_hoisted_5","_toDisplayString","_hoisted_6","_createVNode","_component_router_link","to","name","query","docId","dataId","onClick","$event","_ctx","$store","commit","title","_hoisted_7","author","_hoisted_8","BoardDate","_hoisted_9","_hoisted_10","_cache","args","prevPage","disabled","currentPage","_hoisted_11","pageCount","pagenation","key","goToPage","_normalizeClass","_hoisted_12","nextPage","totalPage","block","_hoisted_13"],"sources":["D:\\Students\\조영민\\vue\\food\\food\\src\\views\\Cs\\NoticeList.vue"],"sourcesContent":["<template>\r\n    <div class=\"basis-full\">\r\n        <div class=\"max-w-7xl mx-auto \">\r\n            <ul class=\"flex justify-between\">\r\n                <li class=\"basis-10\">번호</li>\r\n                <li class=\"basis-7/12\">제목</li>\r\n                <li class=\"basis-16\">작성자</li>\r\n                <li class=\"basis-24\">날짜</li>\r\n            </ul>\r\n            <template v-for=\"(e,index) in dataList\" :key=\"index\">\r\n                <ul v-if=\"calculateNumber(totalLength, perPage, page, index) >0\" class=\"flex justify-between\">\r\n                    <li class=\"basis-10 text-center\">{{ calculateNumber(totalLength, perPage, page, index) }}</li>\r\n                    <li class=\"basis-7/12\">\r\n                        <router-link :to=\"{ name:'noticeDetail', query:{docId: dataId[index]} }\" @click=\"$store.commit('NoticeDetail', dataId[index])\">{{ e.title }}</router-link>\r\n                    </li>\r\n                    <li class=\"basis-16 text-center\">{{e.author}}</li>\r\n                    <li class=\"basis-24 text-center\">{{BoardDate(index)}}</li>\r\n                </ul>\r\n            </template>\r\n        </div>\r\n        <div class=\"flex justify-end\">\r\n            <router-link to=\"/cs/notice/write\" class=\"bg-indigo-400 hover:bg-indigo-600\">글쓰기</router-link>\r\n        </div>\r\n        <div class=\"flex justify-center basis-full gap-x-2 items-center\">\r\n            <button @click=\"prevPage\" :disabled=\"currentPage <= 1\" class=\"font-bold\">이전</button>\r\n            <button v-for=\"e in pageCount.pagenation\" :key=\"e\" @click=\"goToPage(e)\" :class=\"e === page ? 'font-bold text-indigo-600': 'text-slate-600'\">{{ e }}</button>\r\n            <button @click=\"nextPage\" :disabled=\"currentPage >= pageCount.totalPage / block\" class=\"font-bold\">다음</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport {db} from '../../firebase';\r\nexport default {\r\n    name:\"NoticeList\",\r\n    data() {\r\n        return {\r\n            dataList:[],\r\n            dataId:[],\r\n            posts:[],\r\n            page:1,\r\n            perPage: 5,\r\n            lastVisible: null,\r\n            totalLength:0,\r\n            block:5,\r\n            currentPage:1\r\n        }\r\n    },\r\n    methods: {\r\n        BoardDate(index){\r\n            const date = this.dataList[index].date.seconds*1000 + this.dataList[index].date.nanoseconds/1000000;\r\n            const new_date = new Date(date);\r\n            const formattedDate = (''+new_date.getFullYear()).slice(-2)+'-'+ ('0'+( new_date.getMonth()+1)).slice(-2)+'-'+('0'+ new_date.getDate()).slice(-2)+'';\r\n            return formattedDate\r\n        },\r\n        fetchTotalLength(){\r\n            db.collection(\"notice\").get().then((data)=>{\r\n                this.totalLength = data.size\r\n            })\r\n        },\r\n        fetchPost(){\r\n            let query = db.collection(\"notice\").orderBy(\"date\",\"desc\").limit(this.perPage)\r\n            if(this.page>1 && this.lastVisible){\r\n                query = query.startAfter(this.lastVisible);\r\n            }\r\n            query.get().then((data)=>{\r\n                const items = [];\r\n                const ids = [];\r\n                data.forEach((e)=>{\r\n                    ids.push(e.id);\r\n                    items.push(e.data());\r\n                })\r\n                this.dataId = ids;\r\n                this.dataList = items;\r\n                this.lastVisible = data.docs[data.docs.length - 1];\r\n            })\r\n        },\r\n        calculateNumber(totalLength, perPage, page, index){\r\n            const totalPages = perPage*(page-1);\r\n            const postIndex = totalLength - (totalPages+index);\r\n            if (postIndex <= 0){return}\r\n            return postIndex\r\n        },\r\n        prevPage(){\r\n            this.currentPage = this.currentPage -1;\r\n            this.page = this.pageCount.pagenation[0];\r\n            this.fetchPost()\r\n        },\r\n        nextPage(){\r\n            this.currentPage = this.currentPage +1;\r\n            this.page = this.pageCount.pagenation[0];\r\n            this.fetchPost()\r\n        },\r\n        goToPage(e){\r\n            this.page= e;\r\n            this.fetchPost()\r\n        }\r\n    },\r\n    computed:{\r\n        pageCount(){\r\n            const totalPage = Math.ceil(this.totalLength/this.perPage);\r\n            const start = (this.currentPage -1)*this.block;\r\n            const end = start + this.block;\r\n            const pagenation = [];\r\n            for(let i = start +1 ; i <=end && i <=totalPage; i++){\r\n                pagenation.push(i);\r\n            }\r\n            if(pagenation.length === 0 && totalPage >0){\r\n                pagenation.push(totalPage);\r\n            }\r\n            return {totalPage, start, end, pagenation}\r\n        }\r\n    },\r\n    created() {\r\n        this.fetchTotalLength();\r\n        this.fetchPost();\r\n    },\r\n}\r\n</script>\r\n<style>\r\n    \r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}